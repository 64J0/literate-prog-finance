#+TITLE: Literate Programming and Finances
#+DATE: [2022-11-02 qua]
#+AUTHOR: VinÃ­cius Gajo
#+STARTUP: latexpreview

* Introduction

#+BEGIN_QUOTE
Literate programming is a programming paradigm introduced in 1984 by Donald
Knuth in which a computer program is given an explanation of its logic in a
natural language, such as English, interspersed (embedded) with snippets of
macros and traditional source code, from which compilable source code can be
generated. The approach is used in scientific computing and in data science
routinely for reproducible research and open access purposes. Literate
programming tools are used by millions of programmers today.

--- [1]
#+END_QUOTE

This repository holds an example of literate programming used in the finances
landscape. The macros used in the program are written in F#, which is a
functional-first, general purpose, strongly typed, sister language of C# and
other .NET implementations.

** Setup

When creating this example I used those software versions:

+ GNU Emacs 28.2.
+ The ~.emacs~ configuration mentioned in this repository release: [[https://github.com/64J0/Emacs-config/tree/v1.0.0][link]].

Disclosure: some configurations will not work, even if you have the same
~.emacs~ file since it will depend on external packages (LaTeX specific packages
for example), and the file system structure of your computer.

* The Problem

In this example, we're going to tackle an investment problem, which could be
stated as:

+ Suppose you're going to invest your money into an application that gives you
  "h%" of this money each month, as long as you keep it in this
  investment. During the time you keep it there, you can also add more money (in
  a month basis), and this money will follow the same rule stated before, but
  considering that it will start producing more only in the next month that you
  added it.

To make it more clear, let's use some mathematical notation.

Consider that in the first month, the money you have ($z_0$) is only the initial
quantity you decided to invest ($x_0$).

\begin{equation} \tag{1}
z_0 = x_0
\end{equation}

Then, in the second month, the initial money will increase by a quantity given
by $h$ and you're going to increment the value adding $y_0$. So, in the second
month, your money will be:

\begin{equation} \tag{2}
\begin{aligned}
z_1 & = z_0 \times h + y \\
    & = x_0 \times h + y
\end{aligned}
\end{equation}

In the third month you repeat the same operation. This time, your money will be:

\begin{equation} \tag{3}
\begin{aligned}
z_2 & = z_1 \times h + y\\
    & = (x_0 \times h + y) \times h + y\\
    & = (x_0 \times h^2) + (y \times h) + y
\end{aligned}
\end{equation}

And the following months you keep doing the same operation, until the month
$n$. By the n-month your money will be:

\begin{equation} \tag{4}
\begin{aligned}
z_n & = z_{n-1} \times h + y\\
    & = (x_0 \times h^n) + (y \times h^{n - 1}) + (y \times h^{n - 2}) + ... + (y \times h) + y
\end{aligned}
\end{equation}

The objective of this problem is, then, to discover how much money this person
will have after $n$ months in this investment adding $y$ moneys each month.

* The Solution

The solution for this problem is pretty straightforward since we already have
derived the equations for it. Now it's just a matter of implementing it using
some programming language.

In this example I'm going to pick F#, but in your scenario feel free to use the
language you're more comfortable with.

#+BEGIN_SRC fsharp
  let X_0 = 10e3 // 10,000.00 moneys
  let Y   = 1e3  // 1,000 moneys per month
  let H   = 1.01 // 1% of increase
  let N   = 120  // 10 years = 120 months

  let rec calcMoney (x0: float) (y: float) (h: float) (nMonth: int): float =
      match nMonth with
      | 0 -> x0
      | _ when (nMonth > 0) ->
          let previousValue = calcMoney (x0) (y) (h) (nMonth - 1)
          (previousValue * h) + y
      | _ -> 0

  let resultMoney = calcMoney (X_0) (Y) (H) (N)

  printfn """
  Initial money: %.2f
  Addition per month: %.2f
  Increase rate per month: %.2f
  Investment time: %i months
  Final value: %.2f moneys
  """ (X_0) (Y) (H) (N) (resultMoney)
#+END_SRC

* References

[1] - https://en.wikipedia.org/wiki/Literate_programming
